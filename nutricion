#include "nutricion.h"
#include <iostream>
#include <fstream>

Paciente* agregarPaciente(Paciente* cabeza) {
    Paciente* nuevoPaciente = new Paciente;
    std::cout << "Nombre del paciente: ";
    std::getline(std::cin, nuevoPaciente->nombre);
    std::cout << "Edad: ";
    std::cin >> nuevoPaciente->edad;
    std::cout << "Peso (kg): ";
    std::cin >> nuevoPaciente->peso;
    std::cout << "Talla (m): ";
    std::cin >> nuevoPaciente->talla;
    std::cout << "Condición médica (diabetes, hipertensión, anemia): ";
    std::cin >> nuevoPaciente->condicion_medica;
    std::cout << "¿Alergia a la lactosa? (1-Sí, 0-No): ";
    std::cin >> nuevoPaciente->alergia_lactosa;
    std::cout << "¿Alergia a nueces? (1-Sí, 0-No): ";
    std::cin >> nuevoPaciente->alergia_nueces;
    std::cout << "¿Alergia a mariscos? (1-Sí, 0-No): ";
    std::cin >> nuevoPaciente->alergia_mariscos;

    nuevoPaciente->siguiente = cabeza;
    asignarDieta(nuevoPaciente);

    return nuevoPaciente;
}

void asignarDieta(Paciente* paciente) {
    std::string dietaDiabetes[7] = {"Ensalada de verduras", "Pescado a la plancha", "Pollo a la parrilla", "Sopa de verduras", "Quinua con vegetales", "Pavo asado", "Salmón a la plancha"};
    std::string dietaHipertension[7] = {"Ensalada sin sal", "Pescado al vapor", "Pollo sin piel", "Verduras cocidas", "Arroz integral", "Pavo sin sal", "Frutas frescas"};
    std::string dietaAnemia[7] = {"Hígado de res", "Espinacas con huevo", "Pollo con verduras", "Lentejas", "Carne magra", "Quinua con carne", "Espinacas y remolacha"};
    
    if (paciente->condicion_medica == "diabetes") {
        for (int i = 0; i < 7; i++) paciente->dieta[i] = dietaDiabetes[i];
    } else if (paciente->condicion_medica == "hipertension") {
        for (int i = 0; i < 7; i++) paciente->dieta[i] = dietaHipertension[i];
    } else if (paciente->condicion_medica == "anemia") {
        for (int i = 0; i < 7; i++) paciente->dieta[i] = dietaAnemia[i];
    }

    for (int i = 0; i < 7; i++) {
        if (paciente->alergia_lactosa && paciente->dieta[i].find("leche") != std::string::npos) {
            paciente->dieta[i].replace(paciente->dieta[i].find("leche"), 5, "leche de almendras");
        }
        if (paciente->alergia_nueces && paciente->dieta[i].find("nueces") != std::string::npos) {
            paciente->dieta[i].replace(paciente->dieta[i].find("nueces"), 6, "semillas de girasol");
        }
        if (paciente->alergia_mariscos && paciente->dieta[i].find("mariscos") != std::string::npos) {
            paciente->dieta[i].replace(paciente->dieta[i].find("mariscos"), 8, "pollo");
        }
    }
}

void imprimirYGuardarDietas(const Paciente* cabeza) {
    std::ofstream archivo("pacientes_dietas.txt");
    if (!archivo) {
        std::cout << "Error al abrir el archivo.\n";
        return;
    }

    while (cabeza != nullptr) {
        std::cout << "\nDieta semanal para: " << cabeza->nombre << std::endl;
        archivo << "Dieta semanal para: " << cabeza->nombre << std::endl;

        for (int i = 0; i < 7; i++) {
            std::cout << "Día " << i + 1 << ": " << cabeza->dieta[i] << std::endl;
            archivo << "Día " << i + 1 << ": " << cabeza->dieta[i] << std::endl;
        }

        cabeza = cabeza->siguiente;
    }

    archivo.close();
    std::cout << "\nDietas guardadas en 'pacientes_dietas.txt'.\n";
}
